package com.example.MusicPlayer;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.view.KeyEvent;
import android.util.Log;
import android.os.Bundle;

public class MediaButtonReceiver extends BroadcastReceiver {
    private static final String TAG = "MediaButtonReceiver";

    public static native void onHeadsetButton(int keyCode);

    public MediaButtonReceiver() {
        Log.d(TAG, "üî® MediaButtonReceiver —Å–æ–∑–¥–∞–Ω!");
    }

private void tryAlternativeKeyDetection(Intent intent) {
        Log.d(TAG, "üîç –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏—à–∏...");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ extras –≤ Intent
        Bundle extras = intent.getExtras();
        if (extras != null) {
            Log.d(TAG, "üìã –í—Å–µ extras –≤ Intent:");
            for (String key : extras.keySet()) {
                Object value = extras.get(key);
                Log.d(TAG, "  üîë " + key + " = " + value + " (" + (value != null ? value.getClass().getSimpleName() : "null") + ")");

                // –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —á—Ç–æ-—Ç–æ —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –∫–ª–∞–≤–∏—à–∞–º–∏
                if (key.toLowerCase().contains("key") || key.toLowerCase().contains("button")) {
                    Log.d(TAG, "  ‚≠ê –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –≤–∞–∂–Ω—ã–π extra: " + key + " = " + value);
                }
            }
        }

        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å KeyEvent –ø–æ–¥ –¥—Ä—É–≥–∏–º–∏ –∏–º–µ–Ω–∞–º–∏
        Object keyEvent1 = intent.getParcelableExtra("android.intent.extra.KEY_EVENT");
        Object keyEvent2 = intent.getParcelableExtra("key_event");
        Object keyEvent3 = intent.getParcelableExtra("keyevent");

        Log.d(TAG, "üîç –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ KeyEvent:");
        Log.d(TAG, "  android.intent.extra.KEY_EVENT: " + keyEvent1);
        Log.d(TAG, "  key_event: " + keyEvent2);
        Log.d(TAG, "  keyevent: " + keyEvent3);

        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ play/pause (—Å–∞–º–∞—è —á–∞—Å—Ç–∞—è)
        Log.d(TAG, "üéØ –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º PLAY_PAUSE –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
        //onHeadsetButton(KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE);
    }

    private void checkOtherMediaActions(Intent intent) {
        String action = intent.getAction();
        Log.d(TAG, "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –º–µ–¥–∏–∞ actions...");

        // –í–æ–∑–º–æ–∂–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ action'—ã
        if (action != null) {
            if (action.contains("PLAY")) {
                Log.d(TAG, "üéµ –ù–∞–π–¥–µ–Ω PLAY action");
                //onHeadsetButton(KeyEvent.KEYCODE_MEDIA_PLAY);
            } else if (action.contains("PAUSE")) {
                Log.d(TAG, "‚è∏Ô∏è –ù–∞–π–¥–µ–Ω PAUSE action");
                //onHeadsetButton(KeyEvent.KEYCODE_MEDIA_PAUSE);
            } else if (action.contains("NEXT")) {
                Log.d(TAG, "‚è≠Ô∏è –ù–∞–π–¥–µ–Ω NEXT action");
                //onHeadsetButton(KeyEvent.KEYCODE_MEDIA_NEXT);
            } else if (action.contains("PREVIOUS")) {
                Log.d(TAG, "‚èÆÔ∏è –ù–∞–π–¥–µ–Ω PREVIOUS action");
                //onHeadsetButton(KeyEvent.KEYCODE_MEDIA_PREVIOUS);
            } else if (action.contains("HEADSET") || action.contains("BLUETOOTH")) {
                Log.d(TAG, "üéß –ù–∞–π–¥–µ–Ω HEADSET/BLUETOOTH action");
                //onHeadsetButton(KeyEvent.KEYCODE_HEADSETHOOK);
            }
        }
    }

    @Override
    public void onReceive(Context context, Intent intent) {
        Log.d(TAG, "üéß onReceive –≤—ã–∑–≤–∞–Ω!");
        Log.d(TAG, "üì® Intent action: " + intent.getAction());
        Log.d(TAG, "üì¶ Intent: " + intent.toString());
        Log.d(TAG, "üö® –ü–û–õ–£–ß–ï–ù –õ–Æ–ë–û–ô INTENT!");
        Log.d(TAG, "üì® Action: " + intent.getAction());
        Log.d(TAG, "üì¶ Extras: " + intent.getExtras());
        Log.d(TAG, "üîó Categories: " + intent.getCategories());
        Log.d(TAG, "üìç Data: " + intent.getData());

        if (Intent.ACTION_MEDIA_BUTTON.equals(intent.getAction())) {
            Log.d(TAG, "‚úÖ –≠—Ç–æ ACTION_MEDIA_BUTTON!");

            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å KeyEvent —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            KeyEvent event = intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);
            if (event != null) {
                int keyCode = event.getKeyCode();
                int action = event.getAction();

                Log.d(TAG, "üéØ KeyEvent –ø–æ–ª—É—á–µ–Ω: " + keyCode);
                Log.d(TAG, "üé¨ Action: " + (action == KeyEvent.ACTION_DOWN ? "DOWN" : "UP"));

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –∫–ª–∞–≤–∏—à–∏
                String keyName = getMediaKeyName(keyCode);
                Log.d(TAG, "üéµ –¢–∏–ø –∫–ª–∞–≤–∏—à–∏: " + keyName);

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∂–∞—Ç–∏–µ (ACTION_DOWN), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ (ACTION_UP)
                if (action == KeyEvent.ACTION_DOWN) {
                    //onHeadsetButton(keyCode);
                }
            } else {
                Log.d(TAG, "üí• KeyEvent is NULL!");

                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                tryAlternativeKeyDetection(intent);
            }
        } else {
            Log.d(TAG, "‚ùå –≠—Ç–æ –ù–ï ACTION_MEDIA_BUTTON: " + intent.getAction());

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ action'—ã –¥–ª—è –º–µ–¥–∏–∞ –∫–Ω–æ–ø–æ–∫
            checkOtherMediaActions(intent);
        }
    }

    private String getMediaKeyName(int keyCode) {
        switch (keyCode) {
            case KeyEvent.KEYCODE_MEDIA_PLAY:
                return "PLAY";
            case KeyEvent.KEYCODE_MEDIA_PAUSE:
                return "PAUSE";
            case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
                return "PLAY_PAUSE";
            case KeyEvent.KEYCODE_MEDIA_STOP:
                return "STOP";
            case KeyEvent.KEYCODE_MEDIA_NEXT:
                return "NEXT";
            case KeyEvent.KEYCODE_MEDIA_PREVIOUS:
                return "PREVIOUS";
            case KeyEvent.KEYCODE_MEDIA_REWIND:
                return "REWIND";
            case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:
                return "FAST_FORWARD";
            case KeyEvent.KEYCODE_VOLUME_UP:
                return "VOLUME_UP";
            case KeyEvent.KEYCODE_VOLUME_DOWN:
                return "VOLUME_DOWN";
            case KeyEvent.KEYCODE_VOLUME_MUTE:
                return "VOLUME_MUTE";
            case KeyEvent.KEYCODE_HEADSETHOOK:
                return "HEADSET_HOOK";
            default:
                return "UNKNOWN (" + keyCode + ")";
        }
    }
}
