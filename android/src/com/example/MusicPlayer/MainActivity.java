package com.example.MusicPlayer;

import android.os.Bundle;
import android.content.pm.PackageManager;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import android.util.Log;
import android.view.KeyEvent;
import android.content.IntentFilter;
import android.content.Context;
import android.content.Intent;
import android.content.BroadcastReceiver;
import android.media.session.MediaSession;
import android.media.session.PlaybackState;
import android.media.AudioManager;

import android.app.Activity;
import android.os.Bundle;
import android.util.Log;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.media.AudioManager;
import android.media.session.MediaSession;
import android.media.session.PlaybackState;
import android.media.MediaMetadata;
import android.app.NotificationManager;
import android.app.NotificationChannel;
import android.app.Notification;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothHeadset;
import android.bluetooth.BluetoothProfile;
import android.view.KeyEvent;
import android.os.Build;

import android.content.ComponentName;
import android.media.AudioManager;
import android.media.session.MediaSession;
import android.os.Build;
import android.annotation.TargetApi;

import org.qtproject.qt.android.QtNative;
import org.qtproject.qt.android.bindings.QtActivity;

public class MainActivity extends org.qtproject.qt.android.bindings.QtActivity {
    private static final String TAG = "MainActivity";
    private BroadcastReceiver testReceiver;
    private AudioManager audioManager;
    private MediaSession mediaSession;

    @Override
        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            Log.d(TAG, "=== MainActivity onCreate START ===");

            audioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
            Log.d(TAG, "AudioManager –ø–æ–ª—É—á–µ–Ω: " + (audioManager != null));

            // –¢–ï–°–¢ 1: –ü—Ä–æ—Å—Ç–æ–π receiver –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
            testReceiver = new BroadcastReceiver() {
                @Override
                public void onReceive(Context context, Intent intent) {
                    Log.d(TAG, "üî• –õ–Æ–ë–û–ï –°–û–ë–´–¢–ò–ï –ü–û–õ–£–ß–ï–ù–û!");
                    Log.d(TAG, "üì® Action: " + intent.getAction());
                    Log.d(TAG, "üì¶ Data: " + intent.getDataString());
                    Log.d(TAG, "üè∑Ô∏è Categories: " + intent.getCategories());

                    // –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞-–∫–Ω–æ–ø–∫–∞
                    if (Intent.ACTION_MEDIA_BUTTON.equals(intent.getAction())) {
                        Log.d(TAG, "üéµ –≠–¢–û –ú–ï–î–ò–ê –ö–ù–û–ü–ö–ê!");
                        KeyEvent keyEvent = intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);
                        if (keyEvent != null) {
                            Log.d(TAG, "üîë KeyEvent –Ω–∞–π–¥–µ–Ω: " + keyEvent.toString());
                            Log.d(TAG, "üîë KeyCode: " + keyEvent.getKeyCode());
                            Log.d(TAG, "üîë Action: " + keyEvent.getAction());
                        } else {
                            Log.d(TAG, "‚ùå KeyEvent = NULL!");
                        }
                    }

                    // Bluetooth —Å–æ–±—ã—Ç–∏—è
                    if (intent.getAction().contains("bluetooth") || intent.getAction().contains("BLUETOOTH")) {
                        Log.d(TAG, "üîµ BLUETOOTH EVENT!");
                        int state = intent.getIntExtra(BluetoothProfile.EXTRA_STATE, -1);
                        Log.d(TAG, "üîµ Bluetooth state: " + state);
                    }
                }
            };

            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ù–ê –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            IntentFilter filter = new IntentFilter();

            // –ú–µ–¥–∏–∞ —Å–æ–±—ã—Ç–∏—è
            filter.addAction(Intent.ACTION_MEDIA_BUTTON);
            filter.addAction("android.intent.action.MEDIA_BUTTON");

            // –ù–∞—É—à–Ω–∏–∫–∏
            filter.addAction(Intent.ACTION_HEADSET_PLUG);
            filter.addAction("android.intent.action.HEADSET_PLUG");

            // Bluetooth —Å–æ–±—ã—Ç–∏—è
            filter.addAction(BluetoothAdapter.ACTION_CONNECTION_STATE_CHANGED);
            filter.addAction(BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED);
            filter.addAction("android.bluetooth.headset.profile.action.CONNECTION_STATE_CHANGED");
            filter.addAction("android.bluetooth.a2dp.profile.action.CONNECTION_STATE_CHANGED");

            // –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ–¥–∏–∞ —Å–æ–±—ã—Ç–∏—è
            filter.addAction("com.android.music.metachanged");
            filter.addAction("com.android.music.playstatechanged");
            filter.addAction("android.media.AUDIO_BECOMING_NOISY");

            // –î—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            filter.addAction(Intent.ACTION_SCREEN_ON);
            filter.addAction(Intent.ACTION_SCREEN_OFF);
            filter.addAction(Intent.ACTION_USER_PRESENT);

            // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            filter.setPriority(IntentFilter.SYSTEM_HIGH_PRIORITY);

            try {
                registerReceiver(testReceiver, filter, Context.RECEIVER_EXPORTED);
                Log.d(TAG, "‚úÖ TestReceiver –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –£–°–ü–ï–®–ù–û");
            } catch (Exception e) {
                Log.e(TAG, "‚ùå –û–®–ò–ë–ö–ê —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ receiver: " + e.getMessage());
                e.printStackTrace();
            }

            // –¢–ï–°–¢ 2: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ AudioManager (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)
            ComponentName mediaButtonReceiver = new ComponentName(this, MediaButtonReceiver.class);
            try {
                audioManager.registerMediaButtonEventReceiver(mediaButtonReceiver);
                Log.d(TAG, "‚úÖ AudioManager.registerMediaButtonEventReceiver –£–°–ü–ï–®–ù–û");
            } catch (Exception e) {
                Log.e(TAG, "‚ùå –û–®–ò–ë–ö–ê AudioManager.registerMediaButtonEventReceiver: " + e.getMessage());
            }

            // –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ
            Log.d(TAG, "üéß Headset –ø–æ–¥–∫–ª—é—á–µ–Ω: " + audioManager.isWiredHeadsetOn());
            Log.d(TAG, "üéß Bluetooth –ø–æ–¥–∫–ª—é—á–µ–Ω: " + audioManager.isBluetoothA2dpOn());
            Log.d(TAG, "üéß Bluetooth SCO –≤–∫–ª—é—á–µ–Ω: " + audioManager.isBluetoothScoOn());
            Log.d(TAG, "üîä –†–µ–∂–∏–º –∞—É–¥–∏–æ: " + audioManager.getMode());

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Bluetooth
            BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
            if (bluetoothAdapter != null) {
                Log.d(TAG, "üîµ Bluetooth –∞–¥–∞–ø—Ç–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: " + bluetoothAdapter.isEnabled());
                Log.d(TAG, "üîµ Bluetooth state: " + bluetoothAdapter.getState());
            }

            // –¢–ï–°–¢ 4: –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ —Ñ–æ–∫—É—Å
            int result = audioManager.requestAudioFocus(
                new AudioManager.OnAudioFocusChangeListener() {
                    @Override
                    public void onAudioFocusChange(int focusChange) {
                        Log.d(TAG, "üéµ Audio focus –∏–∑–º–µ–Ω–∏–ª—Å—è: " + focusChange);
                    }
                },
                AudioManager.STREAM_MUSIC,
                AudioManager.AUDIOFOCUS_GAIN
            );
            Log.d(TAG, "üéµ Audio focus –∑–∞–ø—Ä–æ—à–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: " + result);

            // –¢–ï–°–¢ 5: –°–æ–∑–¥–∞–µ–º MediaSession –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π Android
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                setupMediaSession();
            }

            // –¢–ï–°–¢ 6: –ò–º–∏—Ç–∏—Ä—É–µ–º —á—Ç–æ –º—ã –º–µ–¥–∏–∞-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            simulateMediaApp();

            Log.d(TAG, "=== MainActivity onCreate END ===");
        }

        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        @Override
        protected void onResume() {
            super.onResume();
            Log.d(TAG, "üì± onResume –≤—ã–∑–≤–∞–Ω");
        }

        @Override
        protected void onPause() {
            super.onPause();
            Log.d(TAG, "üì± onPause –≤—ã–∑–≤–∞–Ω");
        }

        @Override
        public boolean onKeyDown(int keyCode, KeyEvent event) {
            Log.d(TAG, "üîë onKeyDown: " + keyCode + ", event: " + event.toString());

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞-–∫–Ω–æ–ø–∫–∏
            switch (keyCode) {
                case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
                case KeyEvent.KEYCODE_MEDIA_NEXT:
                case KeyEvent.KEYCODE_MEDIA_PREVIOUS:
                case KeyEvent.KEYCODE_HEADSETHOOK:
                    Log.d(TAG, "üéµ –ú–ï–î–ò–ê –ö–ù–û–ü–ö–ê —á–µ—Ä–µ–∑ onKeyDown!");
                    return true;
            }

            return super.onKeyDown(keyCode, event);
        }

        @TargetApi(Build.VERSION_CODES.LOLLIPOP)
        private void setupMediaSession() {
            Log.d(TAG, "üéµ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MediaSession...");

            try {
                mediaSession = new MediaSession(this, "MyMediaSession");

                mediaSession.setCallback(new MediaSession.Callback() {
                    @Override
                    public boolean onMediaButtonEvent(Intent mediaButtonEvent) {
                        Log.d(TAG, "üî• MediaSession.onMediaButtonEvent –í–´–ó–í–ê–ù!");
                        KeyEvent keyEvent = mediaButtonEvent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);
                        if (keyEvent != null && keyEvent.getAction() == KeyEvent.ACTION_DOWN) {
                            Log.d(TAG, "üéµ MediaSession –ø–æ–ª—É—á–∏–ª –∫–Ω–æ–ø–∫—É: " + keyEvent.getKeyCode());
                            return true;
                        }
                        return false;
                    }

                    @Override
                    public void onPlay() {
                        Log.d(TAG, "üéµ MediaSession.onPlay()");
                    }

                    @Override
                    public void onPause() {
                        Log.d(TAG, "üéµ MediaSession.onPause()");
                    }
                });

                mediaSession.setFlags(MediaSession.FLAG_HANDLES_MEDIA_BUTTONS |
                                     MediaSession.FLAG_HANDLES_TRANSPORT_CONTROLS);

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–µ—Ä–∞
                PlaybackState state = new PlaybackState.Builder()
                    .setActions(PlaybackState.ACTION_PLAY | PlaybackState.ACTION_PAUSE |
                               PlaybackState.ACTION_SKIP_TO_NEXT | PlaybackState.ACTION_SKIP_TO_PREVIOUS)
                    .setState(PlaybackState.STATE_PAUSED, 0, 1.0f)
                    .build();
                mediaSession.setPlaybackState(state);

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                MediaMetadata metadata = new MediaMetadata.Builder()
                    .putString(MediaMetadata.METADATA_KEY_TITLE, "Test Track")
                    .putString(MediaMetadata.METADATA_KEY_ARTIST, "Test Artist")
                    .build();
                mediaSession.setMetadata(metadata);

                mediaSession.setActive(true);
                Log.d(TAG, "‚úÖ MediaSession –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ");

            } catch (Exception e) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MediaSession: " + e.getMessage());
                e.printStackTrace();
            }
        }

        private void simulateMediaApp() {
            Log.d(TAG, "üéµ –ò–º–∏—Ç–∞—Ü–∏—è –º–µ–¥–∏–∞-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");

            // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –º–µ–¥–∏–∞-–ø–ª–µ–µ—Ä
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);

                NotificationChannel channel = new NotificationChannel(
                    "media_channel",
                    "Media Player",
                    NotificationManager.IMPORTANCE_LOW
                );
                notificationManager.createNotificationChannel(channel);

                Notification notification = new Notification.Builder(this, "media_channel")
                    .setContentTitle("Test Media Player")
                    .setContentText("Listening for media buttons...")
                    .setSmallIcon(android.R.drawable.ic_media_play)
                    .setOngoing(true)
                    .build();

                notificationManager.notify(1, notification);
                Log.d(TAG, "‚úÖ Media notification —Å–æ–∑–¥–∞–Ω–æ");
            }
        }

        @Override
        protected void onDestroy() {
            Log.d(TAG, "üì± onDestroy –≤—ã–∑–≤–∞–Ω");

            if (testReceiver != null) {
                try {
                    unregisterReceiver(testReceiver);
                    Log.d(TAG, "‚úÖ TestReceiver –æ—Ç—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
                } catch (Exception e) {
                    Log.e(TAG, "‚ùå –û–®–ò–ë–ö–ê –æ—Ç—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ receiver: " + e.getMessage());
                }
            }

            if (audioManager != null) {
                ComponentName mediaButtonReceiver = new ComponentName(this, MediaButtonReceiver.class);
                try {
                    audioManager.unregisterMediaButtonEventReceiver(mediaButtonReceiver);
                    Log.d(TAG, "‚úÖ AudioManager receiver –æ—Ç—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
                } catch (Exception e) {
                    Log.e(TAG, "‚ùå –û–®–ò–ë–ö–ê –æ—Ç—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ AudioManager: " + e.getMessage());
                }
            }

            if (mediaSession != null) {
                try {
                    mediaSession.setActive(false);
                    mediaSession.release();
                    Log.d(TAG, "‚úÖ MediaSession –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞");
                } catch (Exception e) {
                    Log.e(TAG, "‚ùå –û–®–ò–ë–ö–ê –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è MediaSession: " + e.getMessage());
                }
            }

            super.onDestroy();
        }

    public static native void onMediaKeyPressed(int keyCode);
    private native void sendToQt(String action);
    public static native void onPermissionResult(int requestCode, boolean granted);

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);

        Log.d(TAG, "onRequestPermissionsResult called with requestCode: " + requestCode);

        if (requestCode == 1001) {
            Log.d(TAG, "Processing media permissions result");

            boolean allGranted = true;
            for (int i = 0; i < permissions.length; i++) {
                String permission = permissions[i];
                int result = grantResults[i];

                Log.d(TAG, "Permission: " + permission + " = " +
                      (result == PackageManager.PERMISSION_GRANTED ? "GRANTED" : "DENIED"));

                if (result != PackageManager.PERMISSION_GRANTED) {
                    allGranted = false;
                }
            }

            onPermissionResult(requestCode, allGranted);

        } else {
            Log.d(TAG, "Unknown request code: " + requestCode);
        }
    }
}
