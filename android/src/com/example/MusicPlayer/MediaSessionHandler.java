package com.example.MusicPlayer;

import android.content.Context;
import android.media.AudioManager;
import android.media.MediaMetadata;
import android.media.session.MediaSession;
import android.media.session.PlaybackState;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;

public class MediaSessionHandler {
    private static final String TAG = "MediaSessionHandler";
    private MediaSession mediaSession;
    private Context context;
    private Handler mainHandler;

    // Native –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ C++
    public static native void onMediaButton(int keyCode, String action);

    public MediaSessionHandler(Context context) {
        this.context = context;

        // –°–æ–∑–¥–∞–µ–º Handler –¥–ª—è UI –ø–æ—Ç–æ–∫–∞
        mainHandler = new Handler(Looper.getMainLooper());

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ MediaSession –≤ UI –ø–æ—Ç–æ–∫–µ
        mainHandler.post(new Runnable() {
            @Override
            public void run() {
                setupMediaSession();
            }
        });
    }

    private void setupMediaSession() {
        Log.d(TAG, "üéµ –°–æ–∑–¥–∞–µ–º MediaSession...");

        // –°–æ–∑–¥–∞–µ–º MediaSession
        mediaSession = new MediaSession(context, "MyAppMediaSession");

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ –∫–æ–º–∞–Ω–¥
        mediaSession.setCallback(new MediaSession.Callback() {
            @Override
            public void onPlay() {
                Log.d(TAG, "‚ñ∂Ô∏è onPlay() –≤—ã–∑–≤–∞–Ω");
                onMediaButton(85, "PLAY"); // KEYCODE_MEDIA_PLAY
            }

            @Override
            public void onPause() {
                Log.d(TAG, "‚è∏Ô∏è onPause() –≤—ã–∑–≤–∞–Ω");
                onMediaButton(127, "PAUSE"); // KEYCODE_MEDIA_PAUSE
            }

            @Override
            public void onSkipToNext() {
                Log.d(TAG, "‚è≠Ô∏è onSkipToNext() –≤—ã–∑–≤–∞–Ω");
                onMediaButton(87, "NEXT"); // KEYCODE_MEDIA_NEXT
            }

            @Override
            public void onSkipToPrevious() {
                Log.d(TAG, "‚èÆÔ∏è onSkipToPrevious() –≤—ã–∑–≤–∞–Ω");
                onMediaButton(88, "PREVIOUS"); // KEYCODE_MEDIA_PREVIOUS
            }

            @Override
            public void onStop() {
                Log.d(TAG, "‚èπÔ∏è onStop() –≤—ã–∑–≤–∞–Ω");
                onMediaButton(86, "STOP"); // KEYCODE_MEDIA_STOP
            }

            @Override
            public void onFastForward() {
                Log.d(TAG, "‚è© onFastForward() –≤—ã–∑–≤–∞–Ω");
                onMediaButton(90, "FAST_FORWARD"); // KEYCODE_MEDIA_FAST_FORWARD
            }

            @Override
            public void onRewind() {
                Log.d(TAG, "‚è™ onRewind() –≤—ã–∑–≤–∞–Ω");
                onMediaButton(89, "REWIND"); // KEYCODE_MEDIA_REWIND
            }

            // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ play/pause –Ω–∞ –≥–∞—Ä–Ω–∏—Ç—É—Ä–µ
            @Override
            public boolean onMediaButtonEvent(android.content.Intent mediaButtonEvent) {
                Log.d(TAG, "üéß onMediaButtonEvent() –≤—ã–∑–≤–∞–Ω");
                Log.d(TAG, "üì® Intent: " + mediaButtonEvent.toString());

                // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å KeyEvent
                android.view.KeyEvent keyEvent = mediaButtonEvent.getParcelableExtra(android.content.Intent.EXTRA_KEY_EVENT);
                if (keyEvent != null && keyEvent.getAction() == android.view.KeyEvent.ACTION_DOWN) {
                    int keyCode = keyEvent.getKeyCode();
                    Log.d(TAG, "üéØ KeyCode: " + keyCode);

                    switch (keyCode) {
                        case android.view.KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
                        case android.view.KeyEvent.KEYCODE_HEADSETHOOK:
                            Log.d(TAG, "üéµ Play/Pause –∏–ª–∏ Headset Hook");
                            onMediaButton(keyCode, "PLAY_PAUSE");
                            return true;
                        case android.view.KeyEvent.KEYCODE_MEDIA_PLAY:
                            onMediaButton(keyCode, "PLAY");
                            return true;
                        case android.view.KeyEvent.KEYCODE_MEDIA_PAUSE:
                            onMediaButton(keyCode, "PAUSE");
                            return true;
                        case android.view.KeyEvent.KEYCODE_MEDIA_NEXT:
                            onMediaButton(keyCode, "NEXT");
                            return true;
                        case android.view.KeyEvent.KEYCODE_MEDIA_PREVIOUS:
                            onMediaButton(keyCode, "PREVIOUS");
                            return true;
                    }
                }

                // –ï—Å–ª–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ - –≤—ã–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
                return super.onMediaButtonEvent(mediaButtonEvent);
            }
        });

        // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞ –∫–Ω–æ–ø–æ–∫
        mediaSession.setFlags(
            MediaSession.FLAG_HANDLES_MEDIA_BUTTONS |
            MediaSession.FLAG_HANDLES_TRANSPORT_CONTROLS
        );

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        updatePlaybackState(PlaybackState.STATE_PAUSED);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (—ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —Å–∏—Å—Ç–µ–º–µ –ø–æ–Ω—è—Ç—å, —á—Ç–æ –º—ã –º–µ–¥–∏–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
        setDummyMetadata();

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
        mediaSession.setActive(true);

        Log.d(TAG, "‚úÖ MediaSession –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!");
    }

    private void updatePlaybackState(int state) {
        PlaybackState.Builder builder = new PlaybackState.Builder()
            .setActions(
                PlaybackState.ACTION_PLAY |
                PlaybackState.ACTION_PAUSE |
                PlaybackState.ACTION_SKIP_TO_NEXT |
                PlaybackState.ACTION_SKIP_TO_PREVIOUS |
                PlaybackState.ACTION_STOP |
                PlaybackState.ACTION_FAST_FORWARD |
                PlaybackState.ACTION_REWIND
            )
            .setState(state, 0, 1.0f);

        mediaSession.setPlaybackState(builder.build());
        Log.d(TAG, "üîÑ PlaybackState –æ–±–Ω–æ–≤–ª–µ–Ω: " + state);
    }

    private void setDummyMetadata() {
        MediaMetadata metadata = new MediaMetadata.Builder()
            .putString(MediaMetadata.METADATA_KEY_TITLE, "My App")
            .putString(MediaMetadata.METADATA_KEY_ARTIST, "Media Control")
            .putLong(MediaMetadata.METADATA_KEY_DURATION, 0)
            .build();

        mediaSession.setMetadata(metadata);
        Log.d(TAG, "üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º (—Ç–æ–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤ UI –ø–æ—Ç–æ–∫–µ)
    public void setPlaying() {
        mainHandler.post(new Runnable() {
            @Override
            public void run() {
                if (mediaSession != null) {
                    updatePlaybackState(PlaybackState.STATE_PLAYING);
                }
            }
        });
    }

    public void setPaused() {
        mainHandler.post(new Runnable() {
            @Override
            public void run() {
                if (mediaSession != null) {
                    updatePlaybackState(PlaybackState.STATE_PAUSED);
                }
            }
        });
    }

    public void setStopped() {
        mainHandler.post(new Runnable() {
            @Override
            public void run() {
                if (mediaSession != null) {
                    updatePlaybackState(PlaybackState.STATE_STOPPED);
                }
            }
        });
    }

    // –ó–∞–ø—Ä–æ—Å –∞—É–¥–∏–æ —Ñ–æ–∫—É—Å–∞ (–≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞!)
    public void requestAudioFocus() {
        AudioManager audioManager = (AudioManager) context.getSystemService(Context.AUDIO_SERVICE);
        if (audioManager != null) {
            int result = audioManager.requestAudioFocus(
                new AudioManager.OnAudioFocusChangeListener() {
                    @Override
                    public void onAudioFocusChange(int focusChange) {
                        Log.d(TAG, "üîä Audio focus changed: " + focusChange);
                        switch (focusChange) {
                            case AudioManager.AUDIOFOCUS_GAIN:
                                Log.d(TAG, "‚úÖ –ü–æ–ª—É—á–∏–ª–∏ –∞—É–¥–∏–æ —Ñ–æ–∫—É—Å");
                                break;
                            case AudioManager.AUDIOFOCUS_LOSS:
                                Log.d(TAG, "‚ùå –ü–æ—Ç–µ—Ä—è–ª–∏ –∞—É–¥–∏–æ —Ñ–æ–∫—É—Å");
                                break;
                            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:
                                Log.d(TAG, "‚è∏Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ—Ç–µ—Ä—è–ª–∏ –∞—É–¥–∏–æ —Ñ–æ–∫—É—Å");
                                break;
                        }
                    }
                },
                AudioManager.STREAM_MUSIC,
                AudioManager.AUDIOFOCUS_GAIN
            );

            Log.d(TAG, "üéß –ó–∞–ø—Ä–æ—Å –∞—É–¥–∏–æ —Ñ–æ–∫—É—Å–∞: " + (result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED ? "GRANTED" : "FAILED"));
        }
    }

    public void destroy() {
        mainHandler.post(new Runnable() {
            @Override
            public void run() {
                if (mediaSession != null) {
                    mediaSession.setActive(false);
                    mediaSession.release();
                    mediaSession = null;
                    Log.d(TAG, "üóëÔ∏è MediaSession —É–Ω–∏—á—Ç–æ–∂–µ–Ω");
                }
            }
        });
    }
}
